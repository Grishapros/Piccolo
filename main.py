import json
import os
import logging
import random
from telegram import ChatMember
from datetime import datetime, timedelta
from telegram import Update, ChatPermissions
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import asyncio
import nest_asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = "bot_data"
WARNINGS_FILE = os.path.join(DATA_DIR, "warnings.json")
MUTES_FILE = os.path.join(DATA_DIR, "mutes.json")
BANS_FILE = os.path.join(DATA_DIR, "bans.json")
DICK_FILE = os.path.join(DATA_DIR, "dick.json")

# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_data(file_path):
    if not os.path.exists(file_path):
        return {}
    with open(file_path, "r") as file:
        return json.load(file)

# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_data(file_path, data):
    os.makedirs(DATA_DIR, exist_ok=True)
    with open(file_path, "w") as file:
        json.dump(data, file, indent=4)

async def is_user_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user = await context.bot.get_chat_member(update.message.chat_id, update.message.from_user.id)
    return user.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /warn
async def warn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_user_admin(update, context):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    reason = " ".join(context.args) or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
    warned_user_id = update.message.reply_to_message.from_user.id
    warned_user_name = update.message.reply_to_message.from_user.full_name
    warned_by = update.message.from_user.full_name

    warnings = load_data(WARNINGS_FILE)
    if str(warned_user_id) not in warnings:
        warnings[str(warned_user_id)] = []

    warnings[str(warned_user_id)].append({
        "reason": reason,
        "timestamp": datetime.now().isoformat(),
        "warned_by": warned_by
    })

    save_data(WARNINGS_FILE, warnings)

    await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {warned_user_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await context.bot.send_message(
            chat_id=warned_user_id,
            text=(f"‚ö†Ô∏è –í–∞—Å –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ {update.message.chat.title} \n"
                  f"üë§ –í—ã–¥–∞–Ω–æ: {warned_by}\n"
                  f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unwarn
async def unwarn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_user_admin(update, context):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    warned_user_id = update.message.reply_to_message.from_user.id
    warnings = load_data(WARNINGS_FILE)

    if str(warned_user_id) not in warnings or not warnings[str(warned_user_id)]:
        await update.message.reply_text("‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
        return

    warnings[str(warned_user_id)].pop()
    save_data(WARNINGS_FILE, warnings)
    await update.message.reply_text("‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mute
async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_user_admin(update, context):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    try:
        mute_duration = int(context.args[0])
        reason = " ".join(context.args[1:]) or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö> <–ø—Ä–∏—á–∏–Ω–∞>")
        return

    muted_user_id = update.message.reply_to_message.from_user.id
    mute_end_time = datetime.now() + timedelta(minutes=mute_duration)
    muted_by = update.message.from_user.full_name

    mutes = load_data(MUTES_FILE)
    mutes[str(muted_user_id)] = {
        "until": mute_end_time.isoformat(),
        "reason": reason,
        "muted_by": muted_by
    }
    save_data(MUTES_FILE, mutes)

    await context.bot.restrict_chat_member(
        chat_id=update.message.chat_id,
        user_id=muted_user_id,
        permissions=ChatPermissions(can_send_messages=False),
        until_date=mute_end_time
    )

    await update.message.reply_text(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {mute_duration} –º–∏–Ω—É—Ç. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await context.bot.send_message(
            chat_id=muted_user_id,
            text=(f"üîá –í–∞—Å –∑–∞–≥–ª—É—à–∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ {update.message.chat.title}\n"
                  f"üë§ –í—ã–¥–∞–Ω–æ: {muted_by}\n"
                  f"‚è±Ô∏è –ù–∞ –≤—Ä–µ–º—è: {mute_duration} –º–∏–Ω—É—Ç\n"
                  f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unmute
async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_user_admin(update, context):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    unmuted_user_id = update.message.reply_to_message.from_user.id
    mutes = load_data(MUTES_FILE)

    if str(unmuted_user_id) in mutes:
        del mutes[str(unmuted_user_id)]
        save_data(MUTES_FILE, mutes)

    await context.bot.restrict_chat_member(
        chat_id=update.message.chat_id,
        user_id=unmuted_user_id,
        permissions=ChatPermissions(can_send_messages=True)
    )

    await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ban
async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_user_admin(update, context):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    reason = " ".join(context.args) or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
    banned_user_id = update.message.reply_to_message.from_user.id
    banned_by = update.message.from_user.full_name

    bans = load_data(BANS_FILE)
    bans[str(banned_user_id)] = {
        "reason": reason,
        "banned_by": banned_by,
        "timestamp": datetime.now().isoformat()
    }
    save_data(BANS_FILE, bans)

    await context.bot.ban_chat_member(
        chat_id=update.message.chat_id,
        user_id=banned_user_id
    )

    await update.message.reply_text(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await context.bot.send_message(
            chat_id=banned_user_id,
            text=(f"‚õî –í–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ {update.message.chat.title}\n"
                  f"üë§ –í—ã–¥–∞–Ω–æ: {banned_by}\n"
                  f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unban
async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_user_admin(update, context):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    unbanned_user_id = update.message.reply_to_message.from_user.id
    bans = load_data(BANS_FILE)

    if str(unbanned_user_id) in bans:
        del bans[str(unbanned_user_id)]
        save_data(BANS_FILE, bans)

    await context.bot.unban_chat_member(
        chat_id=update.message.chat_id,
        user_id=unbanned_user_id
    )

    await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /warns
async def warns(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target_user_id = update.message.from_user.id

    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id

    warnings = load_data(WARNINGS_FILE)
    user_warnings = warnings.get(str(target_user_id), [])

    if not user_warnings:
        await update.message.reply_text("‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
        return

    warnings_text = "\n".join([
        f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: {w['reason']}, –î–∞—Ç–∞: {w['timestamp']}, –í—ã–¥–∞–Ω–æ: {w['warned_by']}"
        for w in user_warnings
    ])

    await update.message.reply_text(f"üìã –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{warnings_text}")

async def piccolo_dick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    user_name = update.message.from_user.full_name
    dick_data = load_data(DICK_FILE)

    now = datetime.now()
    if user_id in dick_data:
        last_used = datetime.fromisoformat(dick_data[user_id].get("last_used", "1970-01-01T00:00:00"))
        if (now - last_used).total_seconds() < 86400:
            await update.message.reply_text("‚è≥ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ!")
            return

    change = random.randint(-5, 10)
    current_length = dick_data.get(user_id, {"length": 10}).get("length", 10) + change
    current_length = max(1, current_length)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 1 —Å–º

    dick_data[user_id] = {
        "length": current_length,
        "last_used": now.isoformat(),
        "name": user_name
    }

    save_data(DICK_FILE, dick_data)

    sorted_top = sorted(dick_data.items(), key=lambda x: x[1]["length"], reverse=True)
    user_position = next((i for i, x in enumerate(sorted_top, 1) if x[0] == user_id), None)

    await update.message.reply_text(
        f"üìè {user_name}, —Ç–≤–æ–π —Ö—É–π –≤—ã—Ä–æ—Å –Ω–∞ {change:+} —Å–º.\n"
        f"üî¢ –°–µ–π—á–∞—Å –æ–Ω —Ä–∞–≤–µ–Ω: {current_length} —Å–º.\n"
        f"üèÜ –¢—ã –∑–∞–Ω–∏–º–∞–µ—à—å {user_position}-–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /PiccoloDickTop
async def piccolo_dick_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dick_data = load_data(DICK_FILE)

    if not dick_data:
        await update.message.reply_text("‚ÑπÔ∏è –ù–∏–∫—Ç–æ –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /PiccoloDick.")
        return

    sorted_top = sorted(dick_data.items(), key=lambda x: x[1]["length"], reverse=True)[:10]
    top_text = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã:\n"

    for i, (user_id, data) in enumerate(sorted_top, 1):
        top_text += f"{i}. {data['name']} ‚Äî {data['length']} —Å–º\n"

    await update.message.reply_text(top_text)



# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    application = ApplicationBuilder().token("7836059868:AAGr6pjGpIT1MPtADqTLxaP3Oo7Him4y6DQ").build()

    application.add_handler(CommandHandler("warn", warn))
    application.add_handler(CommandHandler("unwarn", unwarn))
    application.add_handler(CommandHandler("mute", mute))
    application.add_handler(CommandHandler("unmute", unmute))
    application.add_handler(CommandHandler("ban", ban))
    application.add_handler(CommandHandler("unban", unban))
    application.add_handler(CommandHandler("warns", warns))
    application.add_handler(CommandHandler("dick", piccolo_dick))
    application.add_handler(CommandHandler("dicktop", piccolo_dick_top))

    await application.initialize()

    try:
        await application.run_polling()
    finally:
        await application.shutdown()

if __name__ == "__main__":
    nest_asyncio.apply()
    try:
        asyncio.run(main())
    except RuntimeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")